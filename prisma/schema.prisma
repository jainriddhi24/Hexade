generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                 String         @id @default(cuid())
  email              String         @unique
  name               String
  passwordHash       String
  role               String
  language           String         @default("en")
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  emailVerifiedAt    DateTime?
  phone              String?
  avatar             String?
  bio                String?
  timezone           String         @default("UTC")
  address            String?
  company            String?
  notes              String?
  emailNotifications Boolean        @default(true)
  smsNotifications   Boolean        @default(false)
  casesAsLawyer      Case[]         @relation("LawyerCases")
  casesAsClient      Case[]         @relation("ClientCases")
  signedDocuments    Document[]     @relation("SignedDocuments")
  uploadedDocuments  Document[]     @relation("UploadedDocuments")
  hearingsAsJudge    Hearing[]      @relation("JudgeHearings")
  lawyerProfile      LawyerProfile?
  messages           Message[]
  paymentsAsClient   Payment[]      @relation("ClientPayments")
  paymentsAsLawyer   Payment[]      @relation("LawyerPayments")
  paymentsAsJudge    Payment[]      @relation("JudgePayments")

  @@index([email])
  @@index([role])
  @@map("users")
}


model LawyerProfile {
  id                   String   @id @default(cuid())
  userId               String   @unique
  barNumber            String?
  practiceAreas        String?
  districts            String?
  experienceYears      Int      @default(0)
  rating               Float    @default(0.0)
  verified             Boolean  @default(false)
  publicProfile        Boolean  @default(true)
  consultationFee      Float?
  languages            String?  @default("[\"en\"]")
  availableForNewCases Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("lawyer_profiles")
}

model Case {
  id               String     @id @default(cuid())
  title            String
  description      String?
  caseType         String
  status           String     @default("FILED")
  clientId         String
  assignedLawyerId String?
  caseNumber       String?    @unique
  courtName        String?
  jurisdiction     String?
  filingDate       DateTime?
  hearingDate      DateTime?
  estimatedValue   Float?     @default(0)
  fee              Float      @default(0)
  paidAmount       Float      @default(0)
  tags             String?    @default("[]")
  priority         String     @default("normal")
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  assignedLawyer   User?      @relation("LawyerCases", fields: [assignedLawyerId], references: [id])
  client           User       @relation("ClientCases", fields: [clientId], references: [id])
  documents        Document[]
  hearings         Hearing[]
  payments         Payment[]  @relation("CasePayments")

  @@index([clientId])
  @@index([assignedLawyerId])
  @@index([status])
  @@index([caseNumber])
  @@map("cases")
}

model Hearing {
  id            String    @id @default(cuid())
  caseId        String
  scheduledAt   DateTime
  duration      Int       @default(60)
  status        String    @default("SCHEDULED")
  judgeId       String?
  roomId        String    @unique
  meetingUrl    String?
  agenda        String?
  notes         String?
  recordingUrl  String?
  transcriptUrl String?
  summary       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  judge         User?     @relation("JudgeHearings", fields: [judgeId], references: [id])
  case          Case      @relation(fields: [caseId], references: [id], onDelete: Cascade)
  messages      Message[]

  @@index([caseId])
  @@index([scheduledAt])
  @@index([status])
  @@map("hearings")
}

model Document {
  id            String    @id @default(cuid())
  caseId        String
  title         String
  description   String?
  documentType  String
  s3Key         String    @unique
  s3Url         String?
  fileSize      Int?
  mimeType      String?
  uploadedById  String
  signerStatus  String    @default("PENDING")
  signedById    String?
  signedAt      DateTime?
  summary       String?
  extractedText String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  signedBy      User?     @relation("SignedDocuments", fields: [signedById], references: [id])
  uploadedBy    User      @relation("UploadedDocuments", fields: [uploadedById], references: [id])
  case          Case      @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@index([caseId])
  @@index([uploadedById])
  @@index([documentType])
  @@map("documents")
}

model Message {
  id          String   @id @default(cuid())
  hearingId   String
  content     String
  messageType String   @default("text")
  metadata    String?
  senderId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sender      User     @relation(fields: [senderId], references: [id])
  hearing     Hearing  @relation(fields: [hearingId], references: [id], onDelete: Cascade)

  @@index([hearingId])
  @@index([senderId])
  @@index([createdAt])
  @@map("messages")
}

model Payment {
  id            String   @id @default(cuid())
  amount        Float    @default(0)
  description   String?
  paymentType   String
  status        String   @default("pending")
  transactionId String?
  clientId      String
  lawyerId      String?
  judgeId       String?
  caseId        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  client        User     @relation("ClientPayments", fields: [clientId], references: [id], onDelete: Cascade)
  lawyer        User?    @relation("LawyerPayments", fields: [lawyerId], references: [id])
  judge         User?    @relation("JudgePayments", fields: [judgeId], references: [id])
  case          Case?    @relation("CasePayments", fields: [caseId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([caseId])
  @@index([status])
  @@index([createdAt])
  @@map("payments")
}
